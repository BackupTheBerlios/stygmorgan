// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include <libintl.h>
#include "stygmprefui.h"
//Copyright(c) 2006 Josep Andreu (holborn)
//License GNU/GPL version 2
#include <Fl/Fl_Preferences.H>
#include <Fl/Fl_File_Chooser.H>

void rmgmpref::cb_rmgmprefwin_i(Fl_Double_Window*, void*) {
  rmgmprefwin->hide();
rmgmo->wpreferences=0;
rmgmprefwin->clear();
delete rmgmprefwin;
}
void rmgmpref::cb_rmgmprefwin(Fl_Double_Window* o, void* v) {
  ((rmgmpref*)(o->user_data()))->cb_rmgmprefwin_i(o,v);
}

void rmgmpref::cb_Cancel_i(Fl_Button*, void*) {
  rmgmprefwin->do_callback();
}
void rmgmpref::cb_Cancel(Fl_Button* o, void* v) {
  ((rmgmpref*)(o->parent()->user_data()))->cb_Cancel_i(o,v);
}

void rmgmpref::cb_Ok_i(Fl_Button*, void*) {
  GuardaPrefs();
rmgmprefwin->do_callback();
}
void rmgmpref::cb_Ok(Fl_Button* o, void* v) {
  ((rmgmpref*)(o->parent()->user_data()))->cb_Ok_i(o,v);
}

void rmgmpref::cb_ASF_i(Fl_Check_Button* o, void*) {
  if ((int) o->value() ) ASFGroup->activate(); else ASFGroup->deactivate();
}
void rmgmpref::cb_ASF(Fl_Check_Button* o, void* v) {
  ((rmgmpref*)(o->parent()->user_data()))->cb_ASF_i(o,v);
}

void rmgmpref::cb_Browse_i(Fl_Button*, void*) {
  char *filename;
filename=fl_file_chooser("Browse:","(*.sf2)",NULL,0);
if (filename==NULL) return;
SFPath->value(filename);
strcpy(rmgmo->ASFFilename,filename);
}
void rmgmpref::cb_Browse(Fl_Button* o, void* v) {
  ((rmgmpref*)(o->parent()->parent()->user_data()))->cb_Browse_i(o,v);
}

void rmgmpref::cb_AConnect_i(Fl_Check_Button* o, void*) {
  if ((int) o->value()) MBros->activate(); else MBros->deactivate();
}
void rmgmpref::cb_AConnect(Fl_Check_Button* o, void* v) {
  ((rmgmpref*)(o->parent()->user_data()))->cb_AConnect_i(o,v);
}

void rmgmpref::cb_Browse1_i(Fl_Button*, void*) {
  char *filename;
filename=fl_dir_chooser("Browse:",rmgmo->TempDir,0);
if (filename==NULL) return;
TempFilesDir->value(filename);
strcpy(rmgmo->TempDir,filename);
}
void rmgmpref::cb_Browse1(Fl_Button* o, void* v) {
  ((rmgmpref*)(o->parent()->user_data()))->cb_Browse1_i(o,v);
}

void rmgmpref::cb_DUseSysEx_i(Fl_Check_Button* o, void*) {
  if((int)o->value())
{
 DTextStart->activate();
 DTextAutoF->activate();
 }
 else
{  
 DTextStart->deactivate();
 DTextAutoF->deactivate();
 };
}
void rmgmpref::cb_DUseSysEx(Fl_Check_Button* o, void* v) {
  ((rmgmpref*)(o->parent()->user_data()))->cb_DUseSysEx_i(o,v);
}

void rmgmpref::cb_DTextStart_i(Fl_Input* o, void*) {
  strcpy(rmgmo->TextSTART,o->value());
}
void rmgmpref::cb_DTextStart(Fl_Input* o, void* v) {
  ((rmgmpref*)(o->parent()->user_data()))->cb_DTextStart_i(o,v);
}

void rmgmpref::cb_DTextAutoF_i(Fl_Input* o, void*) {
  strcpy(rmgmo->TextAUTOF,o->value());
}
void rmgmpref::cb_DTextAutoF(Fl_Input* o, void* v) {
  ((rmgmpref*)(o->parent()->user_data()))->cb_DTextAutoF_i(o,v);
}

rmgmpref::rmgmpref(RMGMO *rmgmo_) {
  char temp[128];
static const char *pepe [] ={"stygmorgan"};

int argc=1;
char **argv= (char **) pepe;

Fl::visual(FL_DOUBLE|FL_INDEX);
Fl::visual(FL_RGB);
rmgmo=rmgmo_;
make_window();
rmgmprefwin->position(x+20,y+20);
bzero(temp,sizeof(temp));
sprintf(temp,"%s %s - Preferences",PACKAGE,VERSION);
rmgmprefwin->copy_label(temp);
rmgmprefwin->icon((char *)p);
rmgmprefwin->show(argc,argv);
}

Fl_Double_Window* rmgmpref::make_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = rmgmprefwin = new Fl_Double_Window(540, 505);
    w = o;
    o->color(FL_BACKGROUND2_COLOR);
    o->callback((Fl_Callback*)cb_rmgmprefwin, (void*)(this));
    { Fl_Button* o = new Fl_Button(455, 475, 80, 25, gettext("Cancel"));
      o->callback((Fl_Callback*)cb_Cancel);
    }
    { Fl_Button* o = new Fl_Button(370, 475, 80, 25, gettext("Ok"));
      o->callback((Fl_Callback*)cb_Ok);
    }
    { Fl_Check_Button* o = ASF = new Fl_Check_Button(5, 215, 245, 25, gettext("Use asfxload to load soundfont at startup?"));
      o->down_box(FL_DOWN_BOX);
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_ASF);
    }
    { Fl_Group* o = ASFGroup = new Fl_Group(5, 230, 530, 50);
      { Fl_File_Input* o = SFPath = new Fl_File_Input(5, 250, 530, 30, gettext("SoundFont"));
        o->labelsize(11);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Button* o = new Fl_Button(470, 230, 65, 20, gettext("Browse"));
        o->labelsize(11);
        o->callback((Fl_Callback*)cb_Browse);
      }
      o->end();
    }
    { Fl_Check_Button* o = AConnect = new Fl_Check_Button(5, 10, 270, 25, gettext("auto connect Midi devices at startup?"));
      o->down_box(FL_DOWN_BOX);
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_AConnect);
    }
    { Fl_Group* o = MBros = new Fl_Group(5, 35, 525, 175);
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      { Fl_Browser* o = BrIn = new Fl_Browser(15, 60, 250, 145, gettext("Midi Input Devices"));
        o->type(2);
        o->labelsize(11);
        o->align(FL_ALIGN_TOP);
        o->when(FL_WHEN_CHANGED);
      }
      { Fl_Browser* o = BrOut = new Fl_Browser(270, 60, 255, 145, gettext("Midi Output Devices "));
        o->type(2);
        o->labelsize(11);
        o->align(FL_ALIGN_TOP);
        o->when(FL_WHEN_CHANGED);
      }
      o->end();
    }
    { Fl_File_Input* o = TempFilesDir = new Fl_File_Input(5, 305, 530, 30, gettext("Directory for temporal files"));
      o->labelsize(11);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Button* o = new Fl_Button(470, 280, 65, 20, gettext("Browse"));
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_Browse1);
    }
    { Fl_Check_Button* o = DRespect = new Fl_Check_Button(5, 470, 270, 25, gettext("Maintain Mutes when pattern changes"));
      o->down_box(FL_DOWN_BOX);
      o->labelsize(11);
    }
    { Fl_Check_Button* o = DUseSysEx = new Fl_Check_Button(5, 345, 270, 25, gettext("Use SysEx messages for Start/AutoF"));
      o->tooltip(gettext("Input form: F0 43 10 .... F7"));
      o->down_box(FL_DOWN_BOX);
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_DUseSysEx);
    }
    { Fl_Input* o = DTextStart = new Fl_Input(5, 385, 465, 25, gettext("SysEx for Start button "));
      o->tooltip(gettext("Input form: F0 43 10 .... F7"));
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_DTextStart);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Input* o = DTextAutoF = new Fl_Input(5, 430, 465, 25, gettext("SysEx for Auto Fill-In button "));
      o->tooltip(gettext("Input form: F0 43 10 .... F7"));
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_DTextAutoF);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    o->end();
  }
  int i;
int val=0;
char sffile[80];

MiraClientes();

Fl_Preferences stygmorgan (Fl_Preferences::USER, WEBSITE, PACKAGE);

stygmorgan.get("TempDir",rmgmo->TempDir,"",126);
TempFilesDir->value(rmgmo->TempDir);

stygmorgan.get("AutoSF",val,0);
ASF->value(val);
ASF->do_callback();

stygmorgan.get("SFFile",sffile,"",126);
SFPath->value(sffile);

stygmorgan.get("MutesPatternChange",rmgmo->Respect,0);
DRespect->value(rmgmo->Respect);

stygmorgan.get("AConnect",val,0);
AConnect->value(val);
AConnect->do_callback();

stygmorgan.get("MidiInDevice",sffile,"",78);

for(i=1;i<=BrIn->size();i++)
 {
    if (strcmp(BrIn->text(i),sffile)==0) 
         { 
           BrIn->select(i,1);
           break;
          } 
  }         

stygmorgan.get("MidiOutDevice",sffile,"",78);

for(i=1;i<=BrOut->size();i++)
 {
    if (strcmp(BrOut->text(i),sffile)==0) 
         { 
           BrOut->select(i,1);
           break;
          } 
  }
  
  
stygmorgan.get("UseSysEX",rmgmo->usesysex,0);
DUseSysEx->value(rmgmo->usesysex);
DUseSysEx->do_callback();
stygmorgan.get("ButStart",rmgmo->TextSTART,"",126);
DTextStart->value(rmgmo->TextSTART);
stygmorgan.get("ButAutoF",rmgmo->TextAUTOF,"",126);
DTextAutoF->value(rmgmo->TextAUTOF);
  return w;
}

void rmgmpref::GuardaPrefs() {
  Fl_Preferences stygmorgan (Fl_Preferences::USER, WEBSITE, PACKAGE);

stygmorgan.set("AConnect",(int)AConnect->value());
if (BrIn->value() > 0 ) 
{
  stygmorgan.set("MidiInDevice",BrIn->text(BrIn->value()));
  bzero(rmgmo->MID,sizeof(rmgmo->MID));
  strcpy(rmgmo->MID,BrIn->text(BrIn->value()));
  rmgmo->CambiaMidi=1;
} 

if (BrOut->value() > 0)
{
 stygmorgan.set("MidiOutDevice",BrOut->text(BrOut->value()));
 bzero(rmgmo->MOD,sizeof(rmgmo->MOD));
 strcpy(rmgmo->MOD,BrOut->text(BrOut->value()));
 rmgmo->CambiaMidi=1; 
}
stygmorgan.set("AutoSF",(int)ASF->value());
stygmorgan.set("SFFile",SFPath->value());

if (((int)ASF->value()) && (SFPath->value() != NULL)) rmgmo->cargaASF();

stygmorgan.set("TempDir",TempFilesDir->value());

rmgmo->Respect=(int)DRespect->value();
stygmorgan.set("MutesPatternChange",rmgmo->Respect);

rmgmo->usesysex=(int)DUseSysEx->value();
stygmorgan.set("UseSysEX",rmgmo->usesysex);

if (rmgmo->usesysex)
{
 stygmorgan.set("ButStart",rmgmo->TextSTART);
 stygmorgan.set("ButAutoF",rmgmo->TextAUTOF);
 rmgmo->ConvierteHexString();
}
}

void rmgmpref::MiraClientes() {
  FILE *fp;
char temp[128];
char temp1[128];
char *masque;
char *name;

if ((fp = fopen ("/proc/asound/seq/clients", "r")) != NULL)
  {
    bzero (temp, sizeof (temp));

      while (fgets (temp, sizeof temp, fp) != NULL)
           {
             
            if (strstr(temp,"Port") != NULL)
             
           {  
             
             strcpy(temp1,temp);
             strtok(temp1,"\"");
             name=strtok(NULL,"\"");
             masque=strtok(NULL,")");
             
             
             
             if ((masque[3]=='W' ) && (strstr(name,"stygmorgan IN")==0)) BrOut->add(name);
             if ((masque[2]=='R' ) && (strstr(name,"stygmorgan OUT")==0)) BrIn->add(name);
             
            } 
           } 
   }
   
   fclose(fp);
}
